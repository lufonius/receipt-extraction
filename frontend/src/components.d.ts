/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Size } from "./components/common/size";
import { MatchResults, RouterHistory } from "@stencil/router";
import { Validator } from "./components/common/validator";
import { Category, Line, ReceiptItem, ReceiptItemType } from "./components/model/client";
export namespace Components {
    interface AppBackdrop {
        "show": boolean;
        "showChange": (show: boolean) => Promise<void>;
        "withAnimation": boolean;
    }
    interface AppButton {
        "disabled": boolean;
        "fullWidth": boolean;
        "inverted": boolean;
        "primary": boolean;
    }
    interface AppButtonRound {
        "classes": string;
        "label": string;
        "size": Size;
    }
    interface AppCategory {
        "history": RouterHistory;
    }
    interface AppComponents {
    }
    interface AppCrop {
        "history": RouterHistory;
    }
    interface AppDialog {
        "isVisible": (show: boolean) => Promise<void>;
        "manuallyClosable": boolean;
    }
    interface AppDivider {
    }
    interface AppIcon {
        "icon": string;
        "size": Size;
        "svgUrl": string;
    }
    interface AppInput {
        "focused": boolean;
        "label": string;
        "messagePerError": { [error: string]: string };
        "mobileKeyboardType": string;
        "placeholder": string;
        "showErrors": boolean;
        "showMobileKeyboard": boolean;
        "validators": Validator[];
        "value": string;
    }
    interface AppLayoutVerticalSplit {
    }
    interface AppLoader {
    }
    interface AppLogo {
    }
    interface AppNavbar {
        "activeUrl": string;
        "history": RouterHistory;
    }
    interface AppProfile {
        "match": MatchResults;
    }
    interface AppQrGeneration {
    }
    interface AppQrScan {
    }
    interface AppReceiptExtraction {
        "history": RouterHistory;
    }
    interface AppReceiptLists {
        "history": RouterHistory;
    }
    interface AppRoot {
    }
    interface AppSnackbar {
        "message": string;
        "show": boolean;
        "type": 'success' | 'failure';
    }
    interface DropupControls {
        "show": boolean;
    }
    interface ListItem {
        "amount": string;
        "category": Category;
        "emptyLabel": string;
        "label": string;
    }
    interface ReceiptItemAdd {
        "categories": Category[];
        "receiptItem": ReceiptItem;
        "selectLine": (line: Line) => Promise<void>;
        "submitted": boolean;
    }
    interface ReceiptItemsEdit {
        "categoryItems": ReceiptItem[];
        "date": ReceiptItem;
        "taxes": ReceiptItem[];
        "total": ReceiptItem;
    }
    interface ReceiptLines {
    }
    interface SelectCategoryDialog {
        "hide": () => Promise<void>;
        "selectedCategoryId"?: number;
        "show": () => Promise<void>;
    }
}
declare global {
    interface HTMLAppBackdropElement extends Components.AppBackdrop, HTMLStencilElement {
    }
    var HTMLAppBackdropElement: {
        prototype: HTMLAppBackdropElement;
        new (): HTMLAppBackdropElement;
    };
    interface HTMLAppButtonElement extends Components.AppButton, HTMLStencilElement {
    }
    var HTMLAppButtonElement: {
        prototype: HTMLAppButtonElement;
        new (): HTMLAppButtonElement;
    };
    interface HTMLAppButtonRoundElement extends Components.AppButtonRound, HTMLStencilElement {
    }
    var HTMLAppButtonRoundElement: {
        prototype: HTMLAppButtonRoundElement;
        new (): HTMLAppButtonRoundElement;
    };
    interface HTMLAppCategoryElement extends Components.AppCategory, HTMLStencilElement {
    }
    var HTMLAppCategoryElement: {
        prototype: HTMLAppCategoryElement;
        new (): HTMLAppCategoryElement;
    };
    interface HTMLAppComponentsElement extends Components.AppComponents, HTMLStencilElement {
    }
    var HTMLAppComponentsElement: {
        prototype: HTMLAppComponentsElement;
        new (): HTMLAppComponentsElement;
    };
    interface HTMLAppCropElement extends Components.AppCrop, HTMLStencilElement {
    }
    var HTMLAppCropElement: {
        prototype: HTMLAppCropElement;
        new (): HTMLAppCropElement;
    };
    interface HTMLAppDialogElement extends Components.AppDialog, HTMLStencilElement {
    }
    var HTMLAppDialogElement: {
        prototype: HTMLAppDialogElement;
        new (): HTMLAppDialogElement;
    };
    interface HTMLAppDividerElement extends Components.AppDivider, HTMLStencilElement {
    }
    var HTMLAppDividerElement: {
        prototype: HTMLAppDividerElement;
        new (): HTMLAppDividerElement;
    };
    interface HTMLAppIconElement extends Components.AppIcon, HTMLStencilElement {
    }
    var HTMLAppIconElement: {
        prototype: HTMLAppIconElement;
        new (): HTMLAppIconElement;
    };
    interface HTMLAppInputElement extends Components.AppInput, HTMLStencilElement {
    }
    var HTMLAppInputElement: {
        prototype: HTMLAppInputElement;
        new (): HTMLAppInputElement;
    };
    interface HTMLAppLayoutVerticalSplitElement extends Components.AppLayoutVerticalSplit, HTMLStencilElement {
    }
    var HTMLAppLayoutVerticalSplitElement: {
        prototype: HTMLAppLayoutVerticalSplitElement;
        new (): HTMLAppLayoutVerticalSplitElement;
    };
    interface HTMLAppLoaderElement extends Components.AppLoader, HTMLStencilElement {
    }
    var HTMLAppLoaderElement: {
        prototype: HTMLAppLoaderElement;
        new (): HTMLAppLoaderElement;
    };
    interface HTMLAppLogoElement extends Components.AppLogo, HTMLStencilElement {
    }
    var HTMLAppLogoElement: {
        prototype: HTMLAppLogoElement;
        new (): HTMLAppLogoElement;
    };
    interface HTMLAppNavbarElement extends Components.AppNavbar, HTMLStencilElement {
    }
    var HTMLAppNavbarElement: {
        prototype: HTMLAppNavbarElement;
        new (): HTMLAppNavbarElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppQrGenerationElement extends Components.AppQrGeneration, HTMLStencilElement {
    }
    var HTMLAppQrGenerationElement: {
        prototype: HTMLAppQrGenerationElement;
        new (): HTMLAppQrGenerationElement;
    };
    interface HTMLAppQrScanElement extends Components.AppQrScan, HTMLStencilElement {
    }
    var HTMLAppQrScanElement: {
        prototype: HTMLAppQrScanElement;
        new (): HTMLAppQrScanElement;
    };
    interface HTMLAppReceiptExtractionElement extends Components.AppReceiptExtraction, HTMLStencilElement {
    }
    var HTMLAppReceiptExtractionElement: {
        prototype: HTMLAppReceiptExtractionElement;
        new (): HTMLAppReceiptExtractionElement;
    };
    interface HTMLAppReceiptListsElement extends Components.AppReceiptLists, HTMLStencilElement {
    }
    var HTMLAppReceiptListsElement: {
        prototype: HTMLAppReceiptListsElement;
        new (): HTMLAppReceiptListsElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppSnackbarElement extends Components.AppSnackbar, HTMLStencilElement {
    }
    var HTMLAppSnackbarElement: {
        prototype: HTMLAppSnackbarElement;
        new (): HTMLAppSnackbarElement;
    };
    interface HTMLDropupControlsElement extends Components.DropupControls, HTMLStencilElement {
    }
    var HTMLDropupControlsElement: {
        prototype: HTMLDropupControlsElement;
        new (): HTMLDropupControlsElement;
    };
    interface HTMLListItemElement extends Components.ListItem, HTMLStencilElement {
    }
    var HTMLListItemElement: {
        prototype: HTMLListItemElement;
        new (): HTMLListItemElement;
    };
    interface HTMLReceiptItemAddElement extends Components.ReceiptItemAdd, HTMLStencilElement {
    }
    var HTMLReceiptItemAddElement: {
        prototype: HTMLReceiptItemAddElement;
        new (): HTMLReceiptItemAddElement;
    };
    interface HTMLReceiptItemsEditElement extends Components.ReceiptItemsEdit, HTMLStencilElement {
    }
    var HTMLReceiptItemsEditElement: {
        prototype: HTMLReceiptItemsEditElement;
        new (): HTMLReceiptItemsEditElement;
    };
    interface HTMLReceiptLinesElement extends Components.ReceiptLines, HTMLStencilElement {
    }
    var HTMLReceiptLinesElement: {
        prototype: HTMLReceiptLinesElement;
        new (): HTMLReceiptLinesElement;
    };
    interface HTMLSelectCategoryDialogElement extends Components.SelectCategoryDialog, HTMLStencilElement {
    }
    var HTMLSelectCategoryDialogElement: {
        prototype: HTMLSelectCategoryDialogElement;
        new (): HTMLSelectCategoryDialogElement;
    };
    interface HTMLElementTagNameMap {
        "app-backdrop": HTMLAppBackdropElement;
        "app-button": HTMLAppButtonElement;
        "app-button-round": HTMLAppButtonRoundElement;
        "app-category": HTMLAppCategoryElement;
        "app-components": HTMLAppComponentsElement;
        "app-crop": HTMLAppCropElement;
        "app-dialog": HTMLAppDialogElement;
        "app-divider": HTMLAppDividerElement;
        "app-icon": HTMLAppIconElement;
        "app-input": HTMLAppInputElement;
        "app-layout-vertical-split": HTMLAppLayoutVerticalSplitElement;
        "app-loader": HTMLAppLoaderElement;
        "app-logo": HTMLAppLogoElement;
        "app-navbar": HTMLAppNavbarElement;
        "app-profile": HTMLAppProfileElement;
        "app-qr-generation": HTMLAppQrGenerationElement;
        "app-qr-scan": HTMLAppQrScanElement;
        "app-receipt-extraction": HTMLAppReceiptExtractionElement;
        "app-receipt-lists": HTMLAppReceiptListsElement;
        "app-root": HTMLAppRootElement;
        "app-snackbar": HTMLAppSnackbarElement;
        "dropup-controls": HTMLDropupControlsElement;
        "list-item": HTMLListItemElement;
        "receipt-item-add": HTMLReceiptItemAddElement;
        "receipt-items-edit": HTMLReceiptItemsEditElement;
        "receipt-lines": HTMLReceiptLinesElement;
        "select-category-dialog": HTMLSelectCategoryDialogElement;
    }
}
declare namespace LocalJSX {
    interface AppBackdrop {
        "onClicked"?: (event: CustomEvent<void>) => void;
        "show"?: boolean;
        "withAnimation"?: boolean;
    }
    interface AppButton {
        "disabled"?: boolean;
        "fullWidth"?: boolean;
        "inverted"?: boolean;
        "onPress"?: (event: CustomEvent<MouseEvent>) => void;
        "primary"?: boolean;
    }
    interface AppButtonRound {
        "classes"?: string;
        "label"?: string;
        "onPress"?: (event: CustomEvent<MouseEvent>) => void;
        "size"?: Size;
    }
    interface AppCategory {
        "history"?: RouterHistory;
    }
    interface AppComponents {
    }
    interface AppCrop {
        "history"?: RouterHistory;
    }
    interface AppDialog {
        "manuallyClosable"?: boolean;
    }
    interface AppDivider {
    }
    interface AppIcon {
        "icon"?: string;
        "size"?: Size;
        "svgUrl"?: string;
    }
    interface AppInput {
        "focused"?: boolean;
        "label"?: string;
        "messagePerError"?: { [error: string]: string };
        "mobileKeyboardType"?: string;
        "onInputBlur"?: (event: CustomEvent<void>) => void;
        "onInputFocus"?: (event: CustomEvent<void>) => void;
        "onInputValueChange"?: (event: CustomEvent<string>) => void;
        "onValidChange"?: (event: CustomEvent<boolean>) => void;
        "placeholder"?: string;
        "showErrors"?: boolean;
        "showMobileKeyboard"?: boolean;
        "validators"?: Validator[];
        "value"?: string;
    }
    interface AppLayoutVerticalSplit {
    }
    interface AppLoader {
    }
    interface AppLogo {
    }
    interface AppNavbar {
        "activeUrl"?: string;
        "history"?: RouterHistory;
    }
    interface AppProfile {
        "match"?: MatchResults;
    }
    interface AppQrGeneration {
    }
    interface AppQrScan {
    }
    interface AppReceiptExtraction {
        "history"?: RouterHistory;
    }
    interface AppReceiptLists {
        "history"?: RouterHistory;
    }
    interface AppRoot {
    }
    interface AppSnackbar {
        "message"?: string;
        "show"?: boolean;
        "type"?: 'success' | 'failure';
    }
    interface DropupControls {
        "onContainerShownAnimationEnd"?: (event: CustomEvent<boolean>) => void;
        "show"?: boolean;
    }
    interface ListItem {
        "amount"?: string;
        "category"?: Category;
        "emptyLabel"?: string;
        "label"?: string;
    }
    interface ReceiptItemAdd {
        "categories"?: Category[];
        "onFormValidChange"?: (event: CustomEvent<boolean>) => void;
        "onReceiptItemChange"?: (event: CustomEvent<ReceiptItem>) => void;
        "receiptItem"?: ReceiptItem;
        "submitted"?: boolean;
    }
    interface ReceiptItemsEdit {
        "categoryItems"?: ReceiptItem[];
        "date"?: ReceiptItem;
        "onAdd"?: (event: CustomEvent<ReceiptItemType>) => void;
        "onDelete"?: (event: CustomEvent<ReceiptItem>) => void;
        "onResetEmpty"?: (event: CustomEvent<ReceiptItem>) => void;
        "onUpdate"?: (event: CustomEvent<ReceiptItem>) => void;
        "taxes"?: ReceiptItem[];
        "total"?: ReceiptItem;
    }
    interface ReceiptLines {
        "onLineClick"?: (event: CustomEvent<Line>) => void;
    }
    interface SelectCategoryDialog {
        "onSelectedCategoryIdChange"?: (event: CustomEvent<number>) => void;
        "selectedCategoryId"?: number;
    }
    interface IntrinsicElements {
        "app-backdrop": AppBackdrop;
        "app-button": AppButton;
        "app-button-round": AppButtonRound;
        "app-category": AppCategory;
        "app-components": AppComponents;
        "app-crop": AppCrop;
        "app-dialog": AppDialog;
        "app-divider": AppDivider;
        "app-icon": AppIcon;
        "app-input": AppInput;
        "app-layout-vertical-split": AppLayoutVerticalSplit;
        "app-loader": AppLoader;
        "app-logo": AppLogo;
        "app-navbar": AppNavbar;
        "app-profile": AppProfile;
        "app-qr-generation": AppQrGeneration;
        "app-qr-scan": AppQrScan;
        "app-receipt-extraction": AppReceiptExtraction;
        "app-receipt-lists": AppReceiptLists;
        "app-root": AppRoot;
        "app-snackbar": AppSnackbar;
        "dropup-controls": DropupControls;
        "list-item": ListItem;
        "receipt-item-add": ReceiptItemAdd;
        "receipt-items-edit": ReceiptItemsEdit;
        "receipt-lines": ReceiptLines;
        "select-category-dialog": SelectCategoryDialog;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-backdrop": LocalJSX.AppBackdrop & JSXBase.HTMLAttributes<HTMLAppBackdropElement>;
            "app-button": LocalJSX.AppButton & JSXBase.HTMLAttributes<HTMLAppButtonElement>;
            "app-button-round": LocalJSX.AppButtonRound & JSXBase.HTMLAttributes<HTMLAppButtonRoundElement>;
            "app-category": LocalJSX.AppCategory & JSXBase.HTMLAttributes<HTMLAppCategoryElement>;
            "app-components": LocalJSX.AppComponents & JSXBase.HTMLAttributes<HTMLAppComponentsElement>;
            "app-crop": LocalJSX.AppCrop & JSXBase.HTMLAttributes<HTMLAppCropElement>;
            "app-dialog": LocalJSX.AppDialog & JSXBase.HTMLAttributes<HTMLAppDialogElement>;
            "app-divider": LocalJSX.AppDivider & JSXBase.HTMLAttributes<HTMLAppDividerElement>;
            "app-icon": LocalJSX.AppIcon & JSXBase.HTMLAttributes<HTMLAppIconElement>;
            "app-input": LocalJSX.AppInput & JSXBase.HTMLAttributes<HTMLAppInputElement>;
            "app-layout-vertical-split": LocalJSX.AppLayoutVerticalSplit & JSXBase.HTMLAttributes<HTMLAppLayoutVerticalSplitElement>;
            "app-loader": LocalJSX.AppLoader & JSXBase.HTMLAttributes<HTMLAppLoaderElement>;
            "app-logo": LocalJSX.AppLogo & JSXBase.HTMLAttributes<HTMLAppLogoElement>;
            "app-navbar": LocalJSX.AppNavbar & JSXBase.HTMLAttributes<HTMLAppNavbarElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-qr-generation": LocalJSX.AppQrGeneration & JSXBase.HTMLAttributes<HTMLAppQrGenerationElement>;
            "app-qr-scan": LocalJSX.AppQrScan & JSXBase.HTMLAttributes<HTMLAppQrScanElement>;
            "app-receipt-extraction": LocalJSX.AppReceiptExtraction & JSXBase.HTMLAttributes<HTMLAppReceiptExtractionElement>;
            "app-receipt-lists": LocalJSX.AppReceiptLists & JSXBase.HTMLAttributes<HTMLAppReceiptListsElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-snackbar": LocalJSX.AppSnackbar & JSXBase.HTMLAttributes<HTMLAppSnackbarElement>;
            "dropup-controls": LocalJSX.DropupControls & JSXBase.HTMLAttributes<HTMLDropupControlsElement>;
            "list-item": LocalJSX.ListItem & JSXBase.HTMLAttributes<HTMLListItemElement>;
            "receipt-item-add": LocalJSX.ReceiptItemAdd & JSXBase.HTMLAttributes<HTMLReceiptItemAddElement>;
            "receipt-items-edit": LocalJSX.ReceiptItemsEdit & JSXBase.HTMLAttributes<HTMLReceiptItemsEditElement>;
            "receipt-lines": LocalJSX.ReceiptLines & JSXBase.HTMLAttributes<HTMLReceiptLinesElement>;
            "select-category-dialog": LocalJSX.SelectCategoryDialog & JSXBase.HTMLAttributes<HTMLSelectCategoryDialogElement>;
        }
    }
}
