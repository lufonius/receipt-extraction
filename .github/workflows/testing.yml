# This is a basic workflow to help you get started with Actions

name: testing

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        forceDeploy:
          description: 'enforce deployment?'
          required: false
          default: 'False'
        version:
          description: 'version to deploy. if empty, current version is taken.'
          required: false
          default: ''

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          # The Java version to make available on the path. Takes a whole or semver Java version, or 1.x syntax (e.g. 1.8 => Java 8.x). Early access versions can be specified in the form of e.g. 14-ea, 14.0.0-ea, or 14.0.0-ea.28
          java-version: '14'
          
      - name: give gradlew execute rights
        run: chmod +x ./backend/gradlew
        
      - name: get home dir
        run: |
          cd ~
          pwd
        
      - name: set to current version of not set by user
        run: |
          VERSION="${{ github.event.inputs.version }}"
          VERSION=$([ -z $VERSION ] && cd ./backend && ./gradlew --no-daemon properties -q | grep "^version:" | awk '{print $2}' || echo $VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using the following version for tagging and deployment: $VERSION"
          
      - name: print current version
        run: |
          echo "Using the following version for tagging and deployment: $VERSION"
          echo "Using the following version for tagging and deployment: ${{ env.VERSION }}"
          
  deploy-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v1
        with:
          # Version of kubectl
          version: 1.19.0
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1.1
        with:
          # Azure credentials i.e. output of `az ad sp create-for-rbac --sdk-auth`
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # Resource Group Name
          resource-group: aignn 
          # AKS Cluster Name
          cluster-name: aignn
      - name: Helm tool installer
        uses: Azure/setup-helm@v1
